PREHOOK: query: create table over10k(
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
	   ts timestamp, 
           dec decimal(4,2),  
           bin binary)
       row format delimited
       fields terminated by '|'
PREHOOK: type: CREATETABLE
POSTHOOK: query: create table over10k(
           t tinyint,
           si smallint,
           i int,
           b bigint,
           f float,
           d double,
           bo boolean,
           s string,
	   ts timestamp, 
           dec decimal(4,2),  
           bin binary)
       row format delimited
       fields terminated by '|'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@over10k
PREHOOK: query: load data local inpath '../../data/files/over10k' into table over10k
PREHOOK: type: LOAD
PREHOOK: Output: default@over10k
POSTHOOK: query: load data local inpath '../../data/files/over10k' into table over10k
POSTHOOK: type: LOAD
POSTHOOK: Output: default@over10k
PREHOOK: query: -- i ranges from 65536 to (65536 + 30)
-- with around 30-40 rows per value.

create table over1k as select * from over10k where i < 65536 + 30
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@over10k
POSTHOOK: query: -- i ranges from 65536 to (65536 + 30)
-- with around 30-40 rows per value.

create table over1k as select * from over10k where i < 65536 + 30
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@over10k
POSTHOOK: Output: default@over1k
PREHOOK: query: create table over500 as select * from over10k where i < 65536 + 15
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@over10k
POSTHOOK: query: create table over500 as select * from over10k where i < 65536 + 15
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@over10k
POSTHOOK: Output: default@over500
PREHOOK: query: create table over2k as select * from over10k where i < 65536 + 60
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@over10k
POSTHOOK: query: create table over2k as select * from over10k where i < 65536 + 60
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@over10k
POSTHOOK: Output: default@over2k
PREHOOK: query: create table over5k as select * from over10k where i < 65536 + 125
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@over10k
POSTHOOK: query: create table over5k as select * from over10k where i < 65536 + 125
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@over10k
POSTHOOK: Output: default@over5k
PREHOOK: query: analyze table over10k compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@over10k
PREHOOK: Output: default@over10k
POSTHOOK: query: analyze table over10k compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over10k
POSTHOOK: Output: default@over10k
PREHOOK: query: analyze table over10k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
PREHOOK: type: QUERY
PREHOOK: Input: default@over10k
#### A masked pattern was here ####
POSTHOOK: query: analyze table over10k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over10k
#### A masked pattern was here ####
PREHOOK: query: analyze table over1k compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k
PREHOOK: Output: default@over1k
POSTHOOK: query: analyze table over1k compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k
POSTHOOK: Output: default@over1k
PREHOOK: query: analyze table over1k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
PREHOOK: type: QUERY
PREHOOK: Input: default@over1k
#### A masked pattern was here ####
POSTHOOK: query: analyze table over1k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over1k
#### A masked pattern was here ####
PREHOOK: query: analyze table over500 compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@over500
PREHOOK: Output: default@over500
POSTHOOK: query: analyze table over500 compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over500
POSTHOOK: Output: default@over500
PREHOOK: query: analyze table over500 compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
PREHOOK: type: QUERY
PREHOOK: Input: default@over500
#### A masked pattern was here ####
POSTHOOK: query: analyze table over500 compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over500
#### A masked pattern was here ####
PREHOOK: query: analyze table over2k compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@over2k
PREHOOK: Output: default@over2k
POSTHOOK: query: analyze table over2k compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over2k
POSTHOOK: Output: default@over2k
PREHOOK: query: analyze table over2k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
PREHOOK: type: QUERY
PREHOOK: Input: default@over2k
#### A masked pattern was here ####
POSTHOOK: query: analyze table over2k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over2k
#### A masked pattern was here ####
PREHOOK: query: analyze table over5k compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@over5k
PREHOOK: Output: default@over5k
POSTHOOK: query: analyze table over5k compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over5k
POSTHOOK: Output: default@over5k
PREHOOK: query: analyze table over5k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
PREHOOK: type: QUERY
PREHOOK: Input: default@over5k
#### A masked pattern was here ####
POSTHOOK: query: analyze table over5k compute statistics for columns t,si,i,b,f,d,bo,s,ts,bin
POSTHOOK: type: QUERY
POSTHOOK: Input: default@over5k
#### A masked pattern was here ####
Warning: Value had a \n character in it.
PREHOOK: query: -- 3way join, left is subquery
Explain
SELECT s1.i1,
       s1.i2,
       r3.i
FROM   (SELECT r1.i i1,
               r2.i i2,
               r1.f,
               r1.bo,
               r1.d
        FROM   over10k r1
               JOIN over5k r2
                 ON r1.d = r2.d
                    AND r1.f = r2.f
                    AND r1.bo = r2.bo
                    AND r1.i = r2.i) s1
       JOIN over500 r3
         ON s1.d + 1 = r3.d + 1
            AND s1.f = r3.f
            AND s1.bo = r3.bo
            AND s1.i1 = r3.i
WHERE  s1.i1 + s1.i2 + r3.i = ( 65536 ) * 3
PREHOOK: type: QUERY
POSTHOOK: query: -- 3way join, left is subquery
Explain
SELECT s1.i1,
       s1.i2,
       r3.i
FROM   (SELECT r1.i i1,
               r2.i i2,
               r1.f,
               r1.bo,
               r1.d
        FROM   over10k r1
               JOIN over5k r2
                 ON r1.d = r2.d
                    AND r1.f = r2.f
                    AND r1.bo = r2.bo
                    AND r1.i = r2.i) s1
       JOIN over500 r3
         ON s1.d + 1 = r3.d + 1
            AND s1.f = r3.f
            AND s1.bo = r3.bo
            AND s1.i1 = r3.i
WHERE  s1.i1 + s1.i2 + r3.i = ( 65536 ) * 3
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME over10k) r1) (TOK_TABREF (TOK_TABNAME over5k) r2) (AND (AND (AND (= (. (TOK_TABLE_OR_COL r1) d) (. (TOK_TABLE_OR_COL r2) d)) (= (. (TOK_TABLE_OR_COL r1) f) (. (TOK_TABLE_OR_COL r2) f))) (= (. (TOK_TABLE_OR_COL r1) bo) (. (TOK_TABLE_OR_COL r2) bo))) (= (. (TOK_TABLE_OR_COL r1) i) (. (TOK_TABLE_OR_COL r2) i))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) i) i1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r2) i) i2) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) f)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) bo)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) d))))) s1) (TOK_TABREF (TOK_TABNAME over500) r3) (AND (AND (AND (= (+ (. (TOK_TABLE_OR_COL s1) d) 1) (+ (. (TOK_TABLE_OR_COL r3) d) 1)) (= (. (TOK_TABLE_OR_COL s1) f) (. (TOK_TABLE_OR_COL r3) f))) (= (. (TOK_TABLE_OR_COL s1) bo) (. (TOK_TABLE_OR_COL r3) bo))) (= (. (TOK_TABLE_OR_COL s1) i1) (. (TOK_TABLE_OR_COL r3) i))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) i1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) i2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r3) i))) (TOK_WHERE (= (+ (+ (. (TOK_TABLE_OR_COL s1) i1) (. (TOK_TABLE_OR_COL s1) i2)) (. (TOK_TABLE_OR_COL r3) i)) (* 65536 3)))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        s1:r1 
          TableScan
            alias: r1
            Reduce Output Operator
              key expressions:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              tag: 0
              value expressions:
                    expr: i
                    type: int
                    expr: f
                    type: float
                    expr: d
                    type: double
                    expr: bo
                    type: boolean
        s1:r2 
          TableScan
            alias: r2
            Reduce Output Operator
              key expressions:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              tag: 1
              value expressions:
                    expr: i
                    type: int
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col2} {VALUE._col4} {VALUE._col5} {VALUE._col6}
            1 {VALUE._col2}
          handleSkewJoin: false
          outputColumnNames: _col2, _col4, _col5, _col6, _col15
          Select Operator
            expressions:
                  expr: _col2
                  type: int
                  expr: _col15
                  type: int
                  expr: _col4
                  type: float
                  expr: _col6
                  type: boolean
                  expr: _col5
                  type: double
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
        $INTNAME 
          TableScan
            Reduce Output Operator
              key expressions:
                    expr: (_col4 + 1)
                    type: double
                    expr: _col2
                    type: float
                    expr: _col3
                    type: boolean
                    expr: _col0
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: (_col4 + 1)
                    type: double
                    expr: _col2
                    type: float
                    expr: _col3
                    type: boolean
                    expr: _col0
                    type: int
              tag: 0
              value expressions:
                    expr: _col0
                    type: int
                    expr: _col1
                    type: int
        r3 
          TableScan
            alias: r3
            Reduce Output Operator
              key expressions:
                    expr: (d + 1)
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: (d + 1)
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              tag: 1
              value expressions:
                    expr: i
                    type: int
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0} {VALUE._col1}
            1 {VALUE._col2}
          handleSkewJoin: false
          outputColumnNames: _col0, _col1, _col7
          Filter Operator
            predicate:
                expr: (((_col0 + _col1) + _col7) = (65536 * 3))
                type: boolean
            Select Operator
              expressions:
                    expr: _col0
                    type: int
                    expr: _col1
                    type: int
                    expr: _col7
                    type: int
              outputColumnNames: _col0, _col1, _col2
              File Output Operator
                compressed: false
                GlobalTableId: 0
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: -- 3way join, left and right are subquery
Explain
SELECT s1.i1,
       s1.i2,
       r3.i
FROM   (SELECT r1.i i1,
               r2.i i2,
               r1.f,
               r1.bo,
               r1.d
        FROM   over10k r1
               JOIN over5k r2
                 ON r1.d = r2.d
                    AND r1.f = r2.f
                    AND r1.bo = r2.bo
                    AND r1.i = r2.i) s1
       JOIN (SELECT i,
                    f,
                    d,
                    bo
             FROM   over500) r3
         ON s1.d + 1 = r3.d + 1
            AND s1.f = r3.f
            AND s1.bo = r3.bo
            AND s1.i1 = r3.i
WHERE  s1.i1 + s1.i2 + r3.i = ( 65536 ) * 3
PREHOOK: type: QUERY
POSTHOOK: query: -- 3way join, left and right are subquery
Explain
SELECT s1.i1,
       s1.i2,
       r3.i
FROM   (SELECT r1.i i1,
               r2.i i2,
               r1.f,
               r1.bo,
               r1.d
        FROM   over10k r1
               JOIN over5k r2
                 ON r1.d = r2.d
                    AND r1.f = r2.f
                    AND r1.bo = r2.bo
                    AND r1.i = r2.i) s1
       JOIN (SELECT i,
                    f,
                    d,
                    bo
             FROM   over500) r3
         ON s1.d + 1 = r3.d + 1
            AND s1.f = r3.f
            AND s1.bo = r3.bo
            AND s1.i1 = r3.i
WHERE  s1.i1 + s1.i2 + r3.i = ( 65536 ) * 3
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME over10k) r1) (TOK_TABREF (TOK_TABNAME over5k) r2) (AND (AND (AND (= (. (TOK_TABLE_OR_COL r1) d) (. (TOK_TABLE_OR_COL r2) d)) (= (. (TOK_TABLE_OR_COL r1) f) (. (TOK_TABLE_OR_COL r2) f))) (= (. (TOK_TABLE_OR_COL r1) bo) (. (TOK_TABLE_OR_COL r2) bo))) (= (. (TOK_TABLE_OR_COL r1) i) (. (TOK_TABLE_OR_COL r2) i))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) i) i1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r2) i) i2) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) f)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) bo)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r1) d))))) s1) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME over500))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL i)) (TOK_SELEXPR (TOK_TABLE_OR_COL f)) (TOK_SELEXPR (TOK_TABLE_OR_COL d)) (TOK_SELEXPR (TOK_TABLE_OR_COL bo))))) r3) (AND (AND (AND (= (+ (. (TOK_TABLE_OR_COL s1) d) 1) (+ (. (TOK_TABLE_OR_COL r3) d) 1)) (= (. (TOK_TABLE_OR_COL s1) f) (. (TOK_TABLE_OR_COL r3) f))) (= (. (TOK_TABLE_OR_COL s1) bo) (. (TOK_TABLE_OR_COL r3) bo))) (= (. (TOK_TABLE_OR_COL s1) i1) (. (TOK_TABLE_OR_COL r3) i))))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) i1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL s1) i2)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL r3) i))) (TOK_WHERE (= (+ (+ (. (TOK_TABLE_OR_COL s1) i1) (. (TOK_TABLE_OR_COL s1) i2)) (. (TOK_TABLE_OR_COL r3) i)) (* 65536 3)))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        s1:r1 
          TableScan
            alias: r1
            Reduce Output Operator
              key expressions:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              tag: 0
              value expressions:
                    expr: i
                    type: int
                    expr: f
                    type: float
                    expr: d
                    type: double
                    expr: bo
                    type: boolean
        s1:r2 
          TableScan
            alias: r2
            Reduce Output Operator
              key expressions:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: d
                    type: double
                    expr: f
                    type: float
                    expr: bo
                    type: boolean
                    expr: i
                    type: int
              tag: 1
              value expressions:
                    expr: i
                    type: int
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col2} {VALUE._col4} {VALUE._col5} {VALUE._col6}
            1 {VALUE._col2}
          handleSkewJoin: false
          outputColumnNames: _col2, _col4, _col5, _col6, _col15
          Select Operator
            expressions:
                  expr: _col2
                  type: int
                  expr: _col15
                  type: int
                  expr: _col4
                  type: float
                  expr: _col6
                  type: boolean
                  expr: _col5
                  type: double
            outputColumnNames: _col0, _col1, _col2, _col3, _col4
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
        $INTNAME 
          TableScan
            Reduce Output Operator
              key expressions:
                    expr: (_col4 + 1)
                    type: double
                    expr: _col2
                    type: float
                    expr: _col3
                    type: boolean
                    expr: _col0
                    type: int
              sort order: ++++
              Map-reduce partition columns:
                    expr: (_col4 + 1)
                    type: double
                    expr: _col2
                    type: float
                    expr: _col3
                    type: boolean
                    expr: _col0
                    type: int
              tag: 0
              value expressions:
                    expr: _col0
                    type: int
                    expr: _col1
                    type: int
        r3:over500 
          TableScan
            alias: over500
            Select Operator
              expressions:
                    expr: i
                    type: int
                    expr: f
                    type: float
                    expr: d
                    type: double
                    expr: bo
                    type: boolean
              outputColumnNames: _col0, _col1, _col2, _col3
              Reduce Output Operator
                key expressions:
                      expr: (_col2 + 1)
                      type: double
                      expr: _col1
                      type: float
                      expr: _col3
                      type: boolean
                      expr: _col0
                      type: int
                sort order: ++++
                Map-reduce partition columns:
                      expr: (_col2 + 1)
                      type: double
                      expr: _col1
                      type: float
                      expr: _col3
                      type: boolean
                      expr: _col0
                      type: int
                tag: 1
                value expressions:
                      expr: _col0
                      type: int
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0} {VALUE._col1}
            1 {VALUE._col0}
          handleSkewJoin: false
          outputColumnNames: _col0, _col1, _col5
          Filter Operator
            predicate:
                expr: (((_col0 + _col1) + _col5) = (65536 * 3))
                type: boolean
            Select Operator
              expressions:
                    expr: _col0
                    type: int
                    expr: _col1
                    type: int
                    expr: _col5
                    type: int
              outputColumnNames: _col0, _col1, _col2
              File Output Operator
                compressed: false
                GlobalTableId: 0
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

