PREHOOK: query: create table src_cbo as select * from src
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
POSTHOOK: query: create table src_cbo as select * from src
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: default@src_cbo
PREHOOK: query: analyze table src_cbo compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@src_cbo
PREHOOK: Output: default@src_cbo
POSTHOOK: query: analyze table src_cbo compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_cbo
POSTHOOK: Output: default@src_cbo
PREHOOK: query: analyze table src_cbo compute statistics for columns key,value
PREHOOK: type: QUERY
PREHOOK: Input: default@src_cbo
#### A masked pattern was here ####
POSTHOOK: query: analyze table src_cbo compute statistics for columns key,value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_cbo
#### A masked pattern was here ####
PREHOOK: query: EXPLAIN
SELECT src1.c1, src2.c4 
FROM
(SELECT src_cbo.key as c1, src_cbo.value as c2 from src_cbo) src1
JOIN
(SELECT src_cbo.key as c3, src_cbo.value as c4 from src_cbo) src2
ON src1.c1 = src2.c3 AND src1.c1 < 100
JOIN
(SELECT src_cbo.key as c5, src_cbo.value as c6 from src_cbo) src3
ON src1.c1 = src3.c5 AND src3.c5 < 80
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT src1.c1, src2.c4 
FROM
(SELECT src_cbo.key as c1, src_cbo.value as c2 from src_cbo) src1
JOIN
(SELECT src_cbo.key as c3, src_cbo.value as c4 from src_cbo) src2
ON src1.c1 = src2.c3 AND src1.c1 < 100
JOIN
(SELECT src_cbo.key as c5, src_cbo.value as c6 from src_cbo) src3
ON src1.c1 = src3.c5 AND src3.c5 < 80
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_JOIN (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src_cbo))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) key) c1) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) value) c2)))) src1) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src_cbo))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) key) c3) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) value) c4)))) src2) (AND (= (. (TOK_TABLE_OR_COL src1) c1) (. (TOK_TABLE_OR_COL src2) c3)) (< (. (TOK_TABLE_OR_COL src1) c1) 100))) (TOK_SUBQUERY (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src_cbo))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) key) c5) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src_cbo) value) c6)))) src3) (AND (= (. (TOK_TABLE_OR_COL src1) c1) (. (TOK_TABLE_OR_COL src3) c5)) (< (. (TOK_TABLE_OR_COL src3) c5) 80)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src1) c1)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL src2) c4)))))

STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-1 depends on stages: Stage-2
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
        src1:src_cbo 
          TableScan
            alias: src_cbo
            Filter Operator
              predicate:
                  expr: ((key < 100) and (key < 80))
                  type: boolean
              Select Operator
                expressions:
                      expr: key
                      type: string
                outputColumnNames: _col0
                Reduce Output Operator
                  key expressions:
                        expr: _col0
                        type: string
                  sort order: +
                  Map-reduce partition columns:
                        expr: _col0
                        type: string
                  tag: 0
                  value expressions:
                        expr: _col0
                        type: string
        src2:src_cbo 
          TableScan
            alias: src_cbo
            Filter Operator
              predicate:
                  expr: ((key < 100) and (key < 80))
                  type: boolean
              Select Operator
                expressions:
                      expr: key
                      type: string
                      expr: value
                      type: string
                outputColumnNames: _col0, _col1
                Reduce Output Operator
                  key expressions:
                        expr: _col0
                        type: string
                  sort order: +
                  Map-reduce partition columns:
                        expr: _col0
                        type: string
                  tag: 1
                  value expressions:
                        expr: _col1
                        type: string
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0}
            1 {VALUE._col1}
          handleSkewJoin: false
          outputColumnNames: _col0, _col3
          File Output Operator
            compressed: false
            GlobalTableId: 0
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        $INTNAME 
          TableScan
            Reduce Output Operator
              key expressions:
                    expr: _col0
                    type: string
              sort order: +
              Map-reduce partition columns:
                    expr: _col0
                    type: string
              tag: 0
              value expressions:
                    expr: _col3
                    type: string
                    expr: _col0
                    type: string
        src3:src_cbo 
          TableScan
            alias: src_cbo
            Filter Operator
              predicate:
                  expr: (key < 80)
                  type: boolean
              Select Operator
                expressions:
                      expr: key
                      type: string
                outputColumnNames: _col0
                Reduce Output Operator
                  key expressions:
                        expr: _col0
                        type: string
                  sort order: +
                  Map-reduce partition columns:
                        expr: _col0
                        type: string
                  tag: 1
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col1} {VALUE._col2}
            1 
          handleSkewJoin: false
          outputColumnNames: _col1, _col2
          Select Operator
            expressions:
                  expr: _col2
                  type: string
                  expr: _col1
                  type: string
            outputColumnNames: _col0, _col1
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

PREHOOK: query: SELECT src1.c1, src2.c4 
FROM
(SELECT src_cbo.key as c1, src_cbo.value as c2 from src_cbo) src1
JOIN
(SELECT src_cbo.key as c3, src_cbo.value as c4 from src_cbo) src2
ON src1.c1 = src2.c3 AND src1.c1 < 100
JOIN
(SELECT src_cbo.key as c5, src_cbo.value as c6 from src_cbo) src3
ON src1.c1 = src3.c5 AND src3.c5 < 80
PREHOOK: type: QUERY
PREHOOK: Input: default@src_cbo
#### A masked pattern was here ####
POSTHOOK: query: SELECT src1.c1, src2.c4 
FROM
(SELECT src_cbo.key as c1, src_cbo.value as c2 from src_cbo) src1
JOIN
(SELECT src_cbo.key as c3, src_cbo.value as c4 from src_cbo) src2
ON src1.c1 = src2.c3 AND src1.c1 < 100
JOIN
(SELECT src_cbo.key as c5, src_cbo.value as c6 from src_cbo) src3
ON src1.c1 = src3.c5 AND src3.c5 < 80
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src_cbo
#### A masked pattern was here ####
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
0	val_0
10	val_10
11	val_11
12	val_12
12	val_12
12	val_12
12	val_12
12	val_12
12	val_12
12	val_12
12	val_12
15	val_15
15	val_15
15	val_15
15	val_15
15	val_15
15	val_15
15	val_15
15	val_15
17	val_17
18	val_18
18	val_18
18	val_18
18	val_18
18	val_18
18	val_18
18	val_18
18	val_18
19	val_19
2	val_2
20	val_20
24	val_24
24	val_24
24	val_24
24	val_24
24	val_24
24	val_24
24	val_24
24	val_24
26	val_26
26	val_26
26	val_26
26	val_26
26	val_26
26	val_26
26	val_26
26	val_26
27	val_27
28	val_28
30	val_30
33	val_33
34	val_34
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
35	val_35
37	val_37
37	val_37
37	val_37
37	val_37
37	val_37
37	val_37
37	val_37
37	val_37
4	val_4
41	val_41
42	val_42
42	val_42
42	val_42
42	val_42
42	val_42
42	val_42
42	val_42
42	val_42
43	val_43
44	val_44
47	val_47
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
5	val_5
51	val_51
51	val_51
51	val_51
51	val_51
51	val_51
51	val_51
51	val_51
51	val_51
53	val_53
54	val_54
57	val_57
58	val_58
58	val_58
58	val_58
58	val_58
58	val_58
58	val_58
58	val_58
58	val_58
64	val_64
65	val_65
66	val_66
67	val_67
67	val_67
67	val_67
67	val_67
67	val_67
67	val_67
67	val_67
67	val_67
69	val_69
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
70	val_70
72	val_72
72	val_72
72	val_72
72	val_72
72	val_72
72	val_72
72	val_72
72	val_72
74	val_74
76	val_76
76	val_76
76	val_76
76	val_76
76	val_76
76	val_76
76	val_76
76	val_76
77	val_77
78	val_78
8	val_8
9	val_9
