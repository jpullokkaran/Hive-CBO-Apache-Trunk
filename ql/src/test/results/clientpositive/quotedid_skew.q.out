PREHOOK: query: CREATE TABLE T1(`!@#$%^&*()_q` string, `y&y` string)
SKEWED BY (`!@#$%^&*()_q`) ON ((2)) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE T1(`!@#$%^&*()_q` string, `y&y` string)
SKEWED BY (`!@#$%^&*()_q`) ON ((2)) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@T1
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1
PREHOOK: type: LOAD
PREHOOK: Output: default@t1
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T1
POSTHOOK: type: LOAD
POSTHOOK: Output: default@t1
PREHOOK: query: CREATE TABLE T2(`!@#$%^&*()_q` string, `y&y` string)
SKEWED BY (`!@#$%^&*()_q`) ON ((2)) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
POSTHOOK: query: CREATE TABLE T2(`!@#$%^&*()_q` string, `y&y` string)
SKEWED BY (`!@#$%^&*()_q`) ON ((2)) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: default@T2
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T2
PREHOOK: type: LOAD
PREHOOK: Output: default@t2
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/T1.txt' INTO TABLE T2
POSTHOOK: type: LOAD
POSTHOOK: Output: default@t2
PREHOOK: query: -- a simple join query with skew on both the tables on the join key
-- adding a order by at the end to make the results deterministic

EXPLAIN
SELECT a.*, b.* FROM T1 a JOIN T2 b ON a. `!@#$%^&*()_q`  = b. `!@#$%^&*()_q`
PREHOOK: type: QUERY
POSTHOOK: query: -- a simple join query with skew on both the tables on the join key
-- adding a order by at the end to make the results deterministic

EXPLAIN
SELECT a.*, b.* FROM T1 a JOIN T2 b ON a. `!@#$%^&*()_q`  = b. `!@#$%^&*()_q`
POSTHOOK: type: QUERY
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TABNAME T1) a) (TOK_TABREF (TOK_TABNAME T2) b) (= (. (TOK_TABLE_OR_COL a) !@#$%^&*()_q) (. (TOK_TABLE_OR_COL b) !@#$%^&*()_q)))) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME a))) (TOK_SELEXPR (TOK_ALLCOLREF (TOK_TABNAME b))))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1, Stage-4
  Stage-4 is a root stage
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        subquery1:a 
          TableScan
            alias: a
            Filter Operator
              predicate:
                  expr: (not (!@#$%^&*()_q = '2'))
                  type: boolean
              Reduce Output Operator
                key expressions:
                      expr: !@#$%^&*()_q
                      type: string
                sort order: +
                Map-reduce partition columns:
                      expr: !@#$%^&*()_q
                      type: string
                tag: 0
                value expressions:
                      expr: !@#$%^&*()_q
                      type: string
                      expr: y&y
                      type: string
        subquery1:b 
          TableScan
            alias: b
            Filter Operator
              predicate:
                  expr: (not (!@#$%^&*()_q = '2'))
                  type: boolean
              Reduce Output Operator
                key expressions:
                      expr: !@#$%^&*()_q
                      type: string
                sort order: +
                Map-reduce partition columns:
                      expr: !@#$%^&*()_q
                      type: string
                tag: 1
                value expressions:
                      expr: !@#$%^&*()_q
                      type: string
                      expr: y&y
                      type: string
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0} {VALUE._col1}
            1 {VALUE._col0} {VALUE._col1}
          handleSkewJoin: false
          outputColumnNames: _col0, _col1, _col4, _col5
          Select Operator
            expressions:
                  expr: _col0
                  type: string
                  expr: _col1
                  type: string
                  expr: _col4
                  type: string
                  expr: _col5
                  type: string
            outputColumnNames: _col0, _col1, _col2, _col3
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Alias -> Map Operator Tree:
#### A masked pattern was here ####
          TableScan
            Union
              Select Operator
                SELECT * : (no compute)
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
#### A masked pattern was here ####
          TableScan
            Union
              Select Operator
                SELECT * : (no compute)
                File Output Operator
                  compressed: false
                  GlobalTableId: 0
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-4
    Map Reduce
      Alias -> Map Operator Tree:
        a 
          TableScan
            alias: a
            Filter Operator
              predicate:
                  expr: (!@#$%^&*()_q = '2')
                  type: boolean
              Reduce Output Operator
                key expressions:
                      expr: !@#$%^&*()_q
                      type: string
                sort order: +
                Map-reduce partition columns:
                      expr: !@#$%^&*()_q
                      type: string
                tag: 0
                value expressions:
                      expr: !@#$%^&*()_q
                      type: string
                      expr: y&y
                      type: string
        b 
          TableScan
            alias: b
            Filter Operator
              predicate:
                  expr: (!@#$%^&*()_q = '2')
                  type: boolean
              Reduce Output Operator
                key expressions:
                      expr: !@#$%^&*()_q
                      type: string
                sort order: +
                Map-reduce partition columns:
                      expr: !@#$%^&*()_q
                      type: string
                tag: 1
                value expressions:
                      expr: !@#$%^&*()_q
                      type: string
                      expr: y&y
                      type: string
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0} {VALUE._col1}
            1 {VALUE._col0} {VALUE._col1}
          handleSkewJoin: false
          outputColumnNames: _col0, _col1, _col4, _col5
          Select Operator
            expressions:
                  expr: _col0
                  type: string
                  expr: _col1
                  type: string
                  expr: _col4
                  type: string
                  expr: _col5
                  type: string
            outputColumnNames: _col0, _col1, _col2, _col3
            File Output Operator
              compressed: false
              GlobalTableId: 0
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

